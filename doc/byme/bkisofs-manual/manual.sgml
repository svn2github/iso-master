<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE book PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
]>
<book>

<bookinfo>
<date>30 May 2007</date>
<title>bkisofs Usage and Reference Manual</title>
<author>
<firstname>Andrew</firstname>
<surname>Smith</surname>
</author>
</bookinfo>
<toc></toc>

<chapter>
<title>bkisofs Overview</title>
<para>bkisofs (I will often call it simply 'bk') is a simple and stable library for reading and writing ISO9660 files. It can also read NRG files, but not write them. It has support for the Joliet, RockRidge, and EL Torito extensions.</para>
<para>Currently bk is used as the backbone of ISO Master - a graphical editor for ISO files, but I encourage you to add ISO support to your application if it is appropriate. Being a library, bk is much easier to use from your application then mkisofs.</para>
<para>Feel free to contact me !!address?? with questions, I will do all I can to help you get going.</para>
<para>The only header file you need to include in your program is <filename class='headerfile'>bk.h</filename>. That has the definitions for all the public functions and the file/directory/volume structures you will have to work with. Do yourself a favour and don't use any other header files from the library - I will do my best to keep <filename class='headerfile'>bk.h</filename> consistent between versions but won't even bother trying with any other files.</para>
<sect1>
<title>Return Codes</title>
<para>asd</para>
</sect1>
<sect1>
<title>Constants</title>
<para>asd</para>
</sect1>
<sect1>
<title>Missing Features</title>
<para>joliet unicode</para>
</sect1>
</chapter>
<chapter>
<title>Function Reference</title>
<para>In this chapter I describe the available bk functions. They are presented in such an order that you can read the chapter sequencially and make use of each function as you go, in the end having full ISO read/write support. You don't have to make use of all the functions of course. For example if bootable ISOs aren't interesting to you - you can sefely ignore the boot functions.</para>
<sect1>
<title>Setup</title>
<para></para>
<sect2>
<title><function>bk_init_vol_info()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_init_vol_info</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>bool <parameter>scanForDuplicateFiles</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>This is the first function you need to call - whether you're reading an ISO or creating one from scratch. The first parameter (<parameter>volInfo</parameter>) is the address of a variable of type <classname>VolInfo</classname> which you declare somewhere in your program. It is safe to use bk to work on more than one ISO at the same time, since all the functions take a <classname>VolInfo*</classname> as a parameter, so you would have one <classname>VolInfo</classname> per ISO.</para>
</sect2>
</sect1>
<sect1>
<title>Reading</title>
<para></para>
<sect2>
<title><function>bk_open_image()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_open_image</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>filename</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>This basically just opens the ISO file for reading. The parameter <parameter>filename</parameter> can have any string in it that would work with the C function <function>open()</function>, i.e. it can have a full or relative or no path plus the name of the file.</para>
<para>Call <function>bk_open_image()</function> after <function>bk_init_vol_info()</function> and before <function>bk_read_vol_info()</function>.</para>
</sect2>
<sect2>
<title><function>bk_read_vol_info()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_read_vol_info</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>This reads information about the ISO: things like the volume name, creation time and the types of directory trees available (ISO9660, Rockrdge, Joliet). Also some boot record information is read (complete boot record info is not guaranteed until after the directory tree is read).</para>
<para>Important to know is that <function>bk_estimate_iso_size()</function> will not work at this point, you must read the directory tree first.</para>
</sect2>
<sect2>
<title><function>bk_read_dir_tree()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_read_dir_tree</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>int <parameter>filenameType</parameter></paramdef>
<paramdef>bool <parameter>keepPosixPermissions</parameter></paramdef>
<paramdef>void(*<parameter>progressFunction</parameter>)(VolInfo*)</paramdef>
</funcprototype>
</funcsynopsis>
<para>This function reads a set of entire directory trees (all the directories and files) from the ISO. bk is capable of reading ISO9660, RockRidge, and Joliet filenames so you can ask to read any of those. You have to decide which one you want based on the available types in <classname>VolInfo</classname>.<classname>filenameTypes</classname>. I recommend that you choose RockRidge over Joliet and Joliet over ISO9660. To illustrate, here's an example:</para>
<programlisting>
<![CDATA[
if(GBLvolInfo.filenameTypes & FNTYPE_ROCKRIDGE)
        rc = bk_read_dir_tree(&GBLvolInfo, FNTYPE_ROCKRIDGE, true, activityProgressUpdaterCbk);
    else if(GBLvolInfo.filenameTypes & FNTYPE_JOLIET)
        rc = bk_read_dir_tree(&GBLvolInfo, FNTYPE_JOLIET, false, activityProgressUpdaterCbk);
    else
        rc = bk_read_dir_tree(&GBLvolInfo, FNTYPE_9660, false, activityProgressUpdaterCbk);
]]>
</programlisting>
</sect2>
</sect1>
<sect1>
<title>Adding</title>
<para></para>
<sect2>
<title><function>bk_add()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_add</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>srcPathAndName</parameter></paramdef>
<paramdef>const char* <parameter>destPathStr</parameter></paramdef>
<paramdef>void(*<parameter>progressFunction</parameter>)(VolInfo*)</paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_create_dir()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_create_dir</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>destPathStr</parameter></paramdef>
<paramdef>const char* <parameter>newDirName</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_add_boot_record()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_add_boot_record</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>srcPathAndName</parameter></paramdef>
<paramdef>int <parameter>bootMediaType</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
</sect1>
<sect1>
<title>Extracting</title>
<para></para>
<sect2>
<title><function>bk_extract()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_extract</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>srcPathAndName</parameter></paramdef>
<paramdef>const char* <parameter>destDir</parameter></paramdef>
<paramdef>bool <parameter>keepPermissions</parameter></paramdef>
<paramdef>void(*<parameter>progressFunction</parameter>)(VolInfo*)</paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_extract_boot_record()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_extract_boot_record</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>destPathAndName</parameter></paramdef>
<paramdef>unsigned <parameter>destFilePerms</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
</sect1>
<sect1>
<title>Deleting</title>
<para></para>
<sect2>
<title><function>bk_delete()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_delete</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>pathAndName</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_delete_boot_record()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>void <function>bk_delete_boot_record</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
</sect1>

<sect1>
<title>Writing</title>
<para></para>
<sect2>
<title><function>bk_write_image()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_write_image</function></funcdef>
<paramdef>const char* <parameter>newImagePathAndName</parameter></paramdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>time_t <parameter>creationTime</parameter></paramdef>
<paramdef>int <parameter>filenameTypes</parameter></paramdef>
<paramdef>void(*<parameter>progressFunction</parameter>)(VolInfo*, double)</paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
</sect1>
<sect1>
<title>Cleanup</title>
<para></para>
<sect2>
<title><function>bk_destroy_vol_info()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>void <function>bk_destroy_vol_info</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
</sect1>
<sect1>
<title>Getters</title>
<para></para>
<sect2>
<title><function>bk_estimate_iso_size()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>off_t <function>bk_estimate_iso_size</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>int <parameter>filenameTypes</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_get_creation_time()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>time_t <function>bk_get_creation_time</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_get_publisher()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>const char* <function>bk_get_publisher</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_get_volume_name()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>const char* <function>bk_get_volume_name</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_get_error_string()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>const char* <function>bk_get_publisher</function></funcdef>
<paramdef>int <parameter>errorId</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_get_dir_from_string()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_get_dir_from_string</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>pathStr</parameter></paramdef>
<paramdef>BkDir** <parameter>dirFoundPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
</sect1>
<sect1>
<title>Setters</title>
<para></para>
<sect2>
<title><function>bk_rename()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_rename</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>srcPathAndName</parameter></paramdef>
<paramdef>const char* <parameter>newName</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_cancel_operation()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>void <function>bk_cancel_operation</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_set_vol_name()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>void <function>bk_set_vol_name</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>volName</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_set_publisher()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>void <function>bk_set_publisher</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>publisher</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_set_follow_symlinks()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>void <function>bk_set_follow_symlinks</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>bool <parameter>doFollow</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
<sect2>
<title><function>bk_set_boot_file()</function></title>
<funcsynopsis>
<funcprototype>
<funcdef>int <function>bk_set_boot_file</function></funcdef>
<paramdef>VolInfo* <parameter>volInfo</parameter></paramdef>
<paramdef>const char* <parameter>srcPathAndName</parameter></paramdef>
</funcprototype>
</funcsynopsis>
<para>asd</para>
</sect2>
</sect1>
</chapter>
<chapter>
<title>Data Structures</title>
<para>This section describes the data structures used by bkisofs to store information about the ISO, directories and files. You shouldn't need to understand anything about <classname>VolInfo</classname> because all its members are accessible using getters and setters. You do need to understand how to read <classname>BkDir</classname>, <classname>BkFile</classname>, and <classname>BkSymLink</classname> because even though bk creates them and fills them in you will have to read their members yourself.</para>
<sect1>
<title><classname>BkFileBase</classname></title>
<para></para>
</sect1>
<sect1>
<title><classname>BkDir</classname></title>
<para></para>
</sect1>
<sect1>
<title><classname>BkFile</classname></title>
<para></para>
</sect1>
<sect1>
<title><classname>BkSymLink</classname></title>
<para></para>
</sect1>
<sect1>
<title>Inheritance</title>
<para>Directories, files, and symbolic links, though certainly different, have something in common - they all have a name and possibly a set of permissions. To save a lot of code duplication bk has a simple inheritance tree: <classname>BkDir</classname>, <classname>BkFile</classname>, and <classname>BkSymLink</classname> all inherit from <classname>BkFileBase</classname>.</para>
<para>This is relevant for you when, for example, you look at the contents of a directory and want to figure out whether an item is a directory, so you could give it a special icon.</para>
<para>You can cast one type from another. It is always safe to cast down (to <classname>BkFileBase</classname>) but it is only sometimes safe to cast up (e.g. to <classname>BkDir</classname>). The next section explains how to detect the type of a <classname>BkFileBase</classname> and the section after that explains how to convert from one type to another.</para>
</sect1>
<sect1>
<title>Detecting the type of a <classname>BkFileBase</classname></title>
<para></para>
<sect2>
<title><function>IS_DIR()</function></title>
<para></para>
</sect2>
<sect2>
<title><function>IS_REG_FILE()</function></title>
<para></para>
</sect2>
<sect2>
<title><function>IS_SYMLINK()</function></title>
<para></para>
</sect2>
</sect1>
<sect1>
<title>Casting</title>
<para></para>
<sect2>
<title><function>BK_DIR_PTR()</function></title>
<para></para>
</sect2>
<sect2>
<title><function>BK_FILE_PTR()</function></title>
<para></para>
</sect2>
<sect2>
<title><function>BK_SYMLINK_PTR()</function></title>
<para></para>
</sect2>
<sect2>
<title><function>BK_BASE_PTR()</function></title>
<para></para>
</sect2>
</sect1>
</chapter>
<chapter>
<title></title>
<para></para>
<sect1>
<title></title>
<para></para>
</sect1>
</chapter>

<!--
<chapter>
<title></title>
<para></para>
<sect1>
<title></title>
<para></para>
</sect1>
</chapter>
-->

</book>
